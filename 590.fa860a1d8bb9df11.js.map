{"version":3,"file":"590.fa860a1d8bb9df11.js","mappings":"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","names":["NestedAppAuthAdapter","constructor","clientId","clientCapabilities","crypto","logger","this","toNaaTokenRequest","request","extraParams","undefined","extraQueryParameters","Map","Object","entries","claims","RequestParameterBuilder","addClientCapabilitiesToClaims","scopes","OIDC_DEFAULT_SCOPES","platformBrokerId","account","homeAccountId","authority","scope","join","correlationId","createNewGuid","StringUtils","isEmptyObj","state","authenticationScheme","AuthenticationScheme","BEARER","extraParameters","fromNaaTokenResponse","response","reqTimestamp","token","id_token","access_token","createClientAuthError","ClientAuthErrorCodes","expiresOn","Date","expires_in","idTokenClaims","AuthToken","base64Decode","fromNaaAccountInfo","environment","uniqueId","localAccountId","tenantId","split","idToken","accessToken","fromCache","tokenType","extExpiresOn","fromAccount","effectiveIdTokenClaims","oid","sub","tid","username","preferred_username","name","fromBridgeError","error","isBridgeError","status","AuthError","ClientAuthError","code","description","ServerError","InteractionRequiredAuthError","NestedAppAuthErrorMessage","NestedAppAuthError","errorCode","errorMessage","super","setPrototypeOf","prototype","createUnsupportedError","NestedAppAuthController","operatingContext","proxy","getBridgeProxy","Error","bridgeProxy","config","getConfig","getLogger","performanceClient","telemetry","client","browserCrypto","isBrowserEnvironment","CryptoOps","DEFAULT_CRYPTO_IMPLEMENTATION","eventHandler","EventHandler","nestedAppAuthAdapter","auth","getBrowserStorage","getEventHandler","createController","_asyncToGenerator","controller","Promise","resolve","initialize","ensureValidRequest","acquireTokenInteractive","_this","validRequest","emitEvent","EventType","ACQUIRE_TOKEN_START","InteractionType","Popup","atPopupMeasurement","startMeasurement","PerformanceEvents","AcquireTokenPopup","add","nestedAppAuthRequest","naaRequest","TimeUtils","getTokenInteractive","result","setActiveAccount","ACQUIRE_TOKEN_SUCCESS","accessTokenSize","length","idTokenSize","end","success","requestId","e","ACQUIRE_TOKEN_FAILURE","acquireTokenSilentInternal","_this2","Silent","ssoSilentMeasurement","SsoSilent","increment","visibilityChangeCount","getTokenSilent","acquireTokenPopup","_this3","acquireTokenRedirect","acquireTokenSilent","silentRequest","_this4","acquireTokenByCode","acquireTokenNative","apiId","accountId","acquireTokenByRefreshToken","commonRequest","addEventCallback","callback","removeEventCallback","callbackId","addPerformanceCallback","removePerformanceCallback","enableAccountStorageEvents","disableAccountStorageEvents","getAccount","accountFilter","getAccountByHomeId","currentAccount","getActiveAccount","getAccountByLocalId","localId","getAccountByUsername","userName","getAllAccounts","handleRedirectPromise","hash","loginPopup","DEFAULT_REQUEST","loginRedirect","logout","logoutRequest","logoutRedirect","logoutPopup","ssoSilent","getTokenCache","setLogger","warning","initializeWrapperLibrary","sku","version","setNavigationClient","navigationClient","getConfiguration","isBrowserEnv","getBrowserCrypto","getPerformanceClient","getRedirectResponse","clearCache","hydrateCache"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@azure/msal-browser/dist/naa/mapping/NestedAppAuthAdapter.mjs","./node_modules/@azure/msal-browser/dist/naa/BridgeError.mjs","./node_modules/@azure/msal-browser/dist/naa/BridgeStatusCode.mjs","./node_modules/@azure/msal-browser/dist/error/NestedAppAuthError.mjs","./node_modules/@azure/msal-browser/dist/controllers/NestedAppAuthController.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.14.0 2024-05-07 */\n'use strict';\nimport { RequestParameterBuilder, StringUtils, AuthenticationScheme, createClientAuthError, ClientAuthErrorCodes, AuthToken, AuthError, InteractionRequiredAuthError, ServerError, ClientAuthError, OIDC_DEFAULT_SCOPES } from '@azure/msal-common';\nimport { isBridgeError } from '../BridgeError.mjs';\nimport { BridgeStatusCode } from '../BridgeStatusCode.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass NestedAppAuthAdapter {\n    constructor(clientId, clientCapabilities, crypto, logger) {\n        this.clientId = clientId;\n        this.clientCapabilities = clientCapabilities;\n        this.crypto = crypto;\n        this.logger = logger;\n    }\n    toNaaTokenRequest(request) {\n        let extraParams;\n        if (request.extraQueryParameters === undefined) {\n            extraParams = new Map();\n        }\n        else {\n            extraParams = new Map(Object.entries(request.extraQueryParameters));\n        }\n        const requestBuilder = new RequestParameterBuilder();\n        const claims = requestBuilder.addClientCapabilitiesToClaims(request.claims, this.clientCapabilities);\n        const scopes = request.scopes || OIDC_DEFAULT_SCOPES;\n        const tokenRequest = {\n            platformBrokerId: request.account?.homeAccountId,\n            clientId: this.clientId,\n            authority: request.authority,\n            scope: scopes.join(\" \"),\n            correlationId: request.correlationId !== undefined\n                ? request.correlationId\n                : this.crypto.createNewGuid(),\n            claims: !StringUtils.isEmptyObj(claims) ? claims : undefined,\n            state: request.state,\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n            extraParameters: extraParams,\n        };\n        return tokenRequest;\n    }\n    fromNaaTokenResponse(request, response, reqTimestamp) {\n        if (!response.token.id_token || !response.token.access_token) {\n            throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n        }\n        const expiresOn = new Date((reqTimestamp + (response.token.expires_in || 0)) * 1000);\n        const idTokenClaims = AuthToken.extractTokenClaims(response.token.id_token, this.crypto.base64Decode);\n        const account = this.fromNaaAccountInfo(response.account, idTokenClaims);\n        const scopes = response.token.scope || request.scope;\n        const authenticationResult = {\n            authority: response.token.authority || account.environment,\n            uniqueId: account.localAccountId,\n            tenantId: account.tenantId,\n            scopes: scopes.split(\" \"),\n            account,\n            idToken: response.token.id_token,\n            idTokenClaims,\n            accessToken: response.token.access_token,\n            fromCache: true,\n            expiresOn: expiresOn,\n            tokenType: request.authenticationScheme || AuthenticationScheme.BEARER,\n            correlationId: request.correlationId,\n            extExpiresOn: expiresOn,\n            state: request.state,\n        };\n        return authenticationResult;\n    }\n    /*\n     *  export type AccountInfo = {\n     *     homeAccountId: string;\n     *     environment: string;\n     *     tenantId: string;\n     *     username: string;\n     *     localAccountId: string;\n     *     name?: string;\n     *     idToken?: string;\n     *     idTokenClaims?: TokenClaims & {\n     *         [key: string]:\n     *             | string\n     *             | number\n     *             | string[]\n     *             | object\n     *             | undefined\n     *             | unknown;\n     *     };\n     *     nativeAccountId?: string;\n     *     authorityType?: string;\n     * };\n     */\n    fromNaaAccountInfo(fromAccount, idTokenClaims) {\n        const effectiveIdTokenClaims = idTokenClaims || fromAccount.idTokenClaims;\n        const localAccountId = fromAccount.localAccountId ||\n            effectiveIdTokenClaims?.oid ||\n            effectiveIdTokenClaims?.sub ||\n            \"\";\n        const tenantId = fromAccount.tenantId || effectiveIdTokenClaims?.tid || \"\";\n        const homeAccountId = fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;\n        const username = fromAccount.username ||\n            effectiveIdTokenClaims?.preferred_username ||\n            \"\";\n        const name = fromAccount.name || effectiveIdTokenClaims?.name;\n        const account = {\n            homeAccountId,\n            environment: fromAccount.environment,\n            tenantId,\n            username,\n            localAccountId,\n            name,\n            idToken: fromAccount.idToken,\n            idTokenClaims: effectiveIdTokenClaims,\n        };\n        return account;\n    }\n    /**\n     *\n     * @param error BridgeError\n     * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError\n     */\n    fromBridgeError(error) {\n        if (isBridgeError(error)) {\n            switch (error.status) {\n                case BridgeStatusCode.UserCancel:\n                    return new ClientAuthError(ClientAuthErrorCodes.userCanceled);\n                case BridgeStatusCode.NoNetwork:\n                    return new ClientAuthError(ClientAuthErrorCodes.noNetworkConnectivity);\n                case BridgeStatusCode.AccountUnavailable:\n                    return new ClientAuthError(ClientAuthErrorCodes.noAccountFound);\n                case BridgeStatusCode.Disabled:\n                    return new ClientAuthError(ClientAuthErrorCodes.nestedAppAuthBridgeDisabled);\n                case BridgeStatusCode.NestedAppAuthUnavailable:\n                    return new ClientAuthError(error.code ||\n                        ClientAuthErrorCodes.nestedAppAuthBridgeDisabled, error.description);\n                case BridgeStatusCode.TransientError:\n                case BridgeStatusCode.PersistentError:\n                    return new ServerError(error.code, error.description);\n                case BridgeStatusCode.UserInteractionRequired:\n                    return new InteractionRequiredAuthError(error.code, error.description);\n                default:\n                    return new AuthError(error.code, error.description);\n            }\n        }\n        else {\n            return new AuthError(\"unknown_error\", \"An unknown error occurred\");\n        }\n    }\n}\n\nexport { NestedAppAuthAdapter };\n","/*! @azure/msal-browser v3.14.0 2024-05-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nfunction isBridgeError(error) {\n    return error.status !== undefined;\n}\n\nexport { isBridgeError };\n","/*! @azure/msal-browser v3.14.0 2024-05-07 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst BridgeStatusCode = {\n    UserInteractionRequired: \"USER_INTERACTION_REQUIRED\",\n    UserCancel: \"USER_CANCEL\",\n    NoNetwork: \"NO_NETWORK\",\n    TransientError: \"TRANSIENT_ERROR\",\n    PersistentError: \"PERSISTENT_ERROR\",\n    Disabled: \"DISABLED\",\n    AccountUnavailable: \"ACCOUNT_UNAVAILABLE\",\n    NestedAppAuthUnavailable: \"NESTED_APP_AUTH_UNAVAILABLE\", // NAA is unavailable in the current context, can retry with standard browser based auth\n};\n\nexport { BridgeStatusCode };\n","/*! @azure/msal-browser v3.14.0 2024-05-07 */\n'use strict';\nimport { AuthError } from '@azure/msal-common';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * NestedAppAuthErrorMessage class containing string constants used by error codes and messages.\n */\nconst NestedAppAuthErrorMessage = {\n    unsupportedMethod: {\n        code: \"unsupported_method\",\n        desc: \"The PKCE code challenge and verifier could not be generated.\",\n    },\n};\nclass NestedAppAuthError extends AuthError {\n    constructor(errorCode, errorMessage) {\n        super(errorCode, errorMessage);\n        Object.setPrototypeOf(this, NestedAppAuthError.prototype);\n        this.name = \"NestedAppAuthError\";\n    }\n    static createUnsupportedError() {\n        return new NestedAppAuthError(NestedAppAuthErrorMessage.unsupportedMethod.code, NestedAppAuthErrorMessage.unsupportedMethod.desc);\n    }\n}\n\nexport { NestedAppAuthError, NestedAppAuthErrorMessage };\n","/*! @azure/msal-browser v3.14.0 2024-05-07 */\n'use strict';\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, PerformanceEvents, TimeUtils } from '@azure/msal-common';\nimport { InteractionType, DEFAULT_REQUEST } from '../utils/BrowserConstants.mjs';\nimport { CryptoOps } from '../crypto/CryptoOps.mjs';\nimport { NestedAppAuthAdapter } from '../naa/mapping/NestedAppAuthAdapter.mjs';\nimport { NestedAppAuthError } from '../error/NestedAppAuthError.mjs';\nimport { EventHandler } from '../event/EventHandler.mjs';\nimport { EventType } from '../event/EventType.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass NestedAppAuthController {\n    constructor(operatingContext) {\n        this.operatingContext = operatingContext;\n        const proxy = this.operatingContext.getBridgeProxy();\n        if (proxy !== undefined) {\n            this.bridgeProxy = proxy;\n        }\n        else {\n            throw new Error(\"unexpected: bridgeProxy is undefined\");\n        }\n        // Set the configuration.\n        this.config = operatingContext.getConfig();\n        // Initialize logger\n        this.logger = this.operatingContext.getLogger();\n        // Initialize performance client\n        this.performanceClient = this.config.telemetry.client;\n        // Initialize the crypto class.\n        this.browserCrypto = operatingContext.isBrowserEnvironment()\n            ? new CryptoOps(this.logger, this.performanceClient)\n            : DEFAULT_CRYPTO_IMPLEMENTATION;\n        this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\n        this.nestedAppAuthAdapter = new NestedAppAuthAdapter(this.config.auth.clientId, this.config.auth.clientCapabilities, this.browserCrypto, this.logger);\n    }\n    getBrowserStorage() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    getEventHandler() {\n        return this.eventHandler;\n    }\n    static async createController(operatingContext) {\n        const controller = new NestedAppAuthController(operatingContext);\n        return Promise.resolve(controller);\n    }\n    initialize() {\n        // do nothing not required by this controller\n        return Promise.resolve();\n    }\n    ensureValidRequest(request) {\n        if (request?.correlationId) {\n            return request;\n        }\n        return {\n            ...request,\n            correlationId: this.browserCrypto.createNewGuid(),\n        };\n    }\n    async acquireTokenInteractive(request) {\n        const validRequest = this.ensureValidRequest(request);\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Popup, validRequest);\n        const atPopupMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenPopup, validRequest.correlationId);\n        atPopupMeasurement?.add({ nestedAppAuthRequest: true });\n        try {\n            const naaRequest = this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);\n            const reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.bridgeProxy.getTokenInteractive(naaRequest);\n            const result = this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp);\n            this.operatingContext.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Popup, result);\n            atPopupMeasurement.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n            atPopupMeasurement.end({\n                success: true,\n                requestId: result.requestId,\n            });\n            return result;\n        }\n        catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Popup, null, e);\n            atPopupMeasurement.end({\n                success: false,\n            }, e);\n            throw error;\n        }\n    }\n    async acquireTokenSilentInternal(request) {\n        const validRequest = this.ensureValidRequest(request);\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, validRequest);\n        const ssoSilentMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SsoSilent, validRequest.correlationId);\n        ssoSilentMeasurement?.increment({\n            visibilityChangeCount: 0,\n        });\n        ssoSilentMeasurement?.add({\n            nestedAppAuthRequest: true,\n        });\n        try {\n            const naaRequest = this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);\n            const reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.bridgeProxy.getTokenSilent(naaRequest);\n            const result = this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp);\n            this.operatingContext.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, result);\n            ssoSilentMeasurement?.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n            ssoSilentMeasurement?.end({\n                success: true,\n                requestId: result.requestId,\n            });\n            return result;\n        }\n        catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, e);\n            ssoSilentMeasurement?.end({\n                success: false,\n            }, e);\n            throw error;\n        }\n    }\n    async acquireTokenPopup(request) {\n        return this.acquireTokenInteractive(request);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenRedirect(request) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    async acquireTokenSilent(silentRequest) {\n        return this.acquireTokenSilentInternal(silentRequest);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenByCode(request // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    acquireTokenNative(request, apiId, // eslint-disable-line @typescript-eslint/no-unused-vars\n    accountId // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    acquireTokenByRefreshToken(commonRequest, // eslint-disable-line @typescript-eslint/no-unused-vars\n    silentRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback) {\n        return this.eventHandler.addEventCallback(callback);\n    }\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId) {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addPerformanceCallback(callback) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    removePerformanceCallback(callbackId) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    enableAccountStorageEvents() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    disableAccountStorageEvents() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAccount(accountFilter) {\n        throw NestedAppAuthError.createUnsupportedError();\n        // TODO: Look at standard implementation\n    }\n    getAccountByHomeId(homeAccountId) {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.homeAccountId === homeAccountId) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    getAccountByLocalId(localId) {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.localAccountId === localId) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    getAccountByUsername(userName) {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.username === userName) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    getAllAccounts() {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            return [\n                this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount),\n            ];\n        }\n        else {\n            return [];\n        }\n    }\n    handleRedirectPromise(hash // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        return Promise.resolve(null);\n    }\n    loginPopup(request // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        return this.acquireTokenInteractive(request || DEFAULT_REQUEST);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    loginRedirect(request) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    logout(logoutRequest) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutRedirect(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutPopup(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    ssoSilent(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    request) {\n        return this.acquireTokenSilentInternal(request);\n    }\n    getTokenCache() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    /**\n     * Returns the logger instance\n     */\n    getLogger() {\n        return this.logger;\n    }\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger Logger instance\n     */\n    setLogger(logger) {\n        this.logger = logger;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setActiveAccount(account) {\n        /*\n         * StandardController uses this to allow the developer to set the active account\n         * in the nested app auth scenario the active account is controlled by the app hosting the nested app\n         */\n        this.logger.warning(\"nestedAppAuth does not support setActiveAccount\");\n        return;\n    }\n    getActiveAccount() {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n        }\n        else {\n            return null;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initializeWrapperLibrary(sku, version) {\n        /*\n         * Standard controller uses this to set the sku and version of the wrapper library in the storage\n         * we do nothing here\n         */\n        return;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setNavigationClient(navigationClient) {\n        this.logger.warning(\"setNavigationClient is not supported in nested app auth\");\n    }\n    getConfiguration() {\n        return this.config;\n    }\n    isBrowserEnv() {\n        return this.operatingContext.isBrowserEnvironment();\n    }\n    getBrowserCrypto() {\n        return this.browserCrypto;\n    }\n    getPerformanceClient() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    getRedirectResponse() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async clearCache(logoutRequest) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async hydrateCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    result, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    request) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n}\n\nexport { NestedAppAuthController };\n"],"x_google_ignoreList":[0,1,2,3,4]}