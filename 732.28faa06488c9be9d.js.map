{"version":3,"file":"732.28faa06488c9be9d.js","mappings":"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","names":["NestedAppAuthAdapter","constructor","clientId","clientCapabilities","crypto","logger","this","toNaaTokenRequest","request","extraParams","undefined","extraQueryParameters","Map","Object","entries","claims","RequestParameterBuilder","addClientCapabilitiesToClaims","platformBrokerId","account","homeAccountId","authority","scope","scopes","join","correlationId","createNewGuid","StringUtils","isEmptyObj","state","authenticationScheme","AuthenticationScheme","BEARER","extraParameters","fromNaaTokenResponse","response","reqTimestamp","token","id_token","access_token","createClientAuthError","ClientAuthErrorCodes","expiresOn","Date","expires_in","idTokenClaims","AuthToken","base64Decode","fromNaaAccountInfo","environment","uniqueId","localAccountId","tenantId","split","idToken","accessToken","fromCache","tokenType","extExpiresOn","fromAccount","effectiveIdTokenClaims","oid","sub","tid","username","preferred_username","name","fromBridgeError","error","isBridgeError","status","AuthError","ClientAuthError","code","description","ServerError","InteractionRequiredAuthError","NestedAppAuthErrorMessage","NestedAppAuthError","errorCode","errorMessage","super","setPrototypeOf","prototype","createUnsupportedError","NestedAppAuthController","operatingContext","proxy","getBridgeProxy","Error","bridgeProxy","config","getConfig","getLogger","performanceClient","telemetry","client","browserCrypto","isBrowserEnvironment","CryptoOps","DEFAULT_CRYPTO_IMPLEMENTATION","eventHandler","EventHandler","nestedAppAuthAdapter","auth","getBrowserStorage","getEventHandler","createController","_asyncToGenerator","controller","Promise","resolve","initialize","acquireTokenInteractive","_this","emitEvent","EventType","ACQUIRE_TOKEN_START","InteractionType","Popup","atPopupMeasurement","startMeasurement","PerformanceEvents","AcquireTokenPopup","add","nestedAppAuthRequest","naaRequest","TimeUtils","getTokenInteractive","result","setActiveAccount","ACQUIRE_TOKEN_SUCCESS","accessTokenSize","length","idTokenSize","end","success","requestId","e","ACQUIRE_TOKEN_FAILURE","subErrorCode","subError","acquireTokenSilentInternal","_this2","Silent","ssoSilentMeasurement","SsoSilent","increment","visibilityChangeCount","getTokenSilent","acquireTokenPopup","_this3","acquireTokenRedirect","acquireTokenSilent","silentRequest","_this4","acquireTokenByCode","acquireTokenNative","apiId","accountId","acquireTokenByRefreshToken","commonRequest","addEventCallback","callback","removeEventCallback","callbackId","addPerformanceCallback","removePerformanceCallback","enableAccountStorageEvents","disableAccountStorageEvents","getAccount","accountFilter","getAccountByHomeId","currentAccount","getActiveAccount","getAccountByLocalId","localId","getAccountByUsername","userName","getAllAccounts","handleRedirectPromise","hash","loginPopup","loginRedirect","logout","logoutRequest","logoutRedirect","logoutPopup","ssoSilent","getTokenCache","setLogger","warning","initializeWrapperLibrary","sku","version","setNavigationClient","navigationClient","getConfiguration","isBrowserEnv","getBrowserCrypto","getPerformanceClient","getRedirectResponse","preflightBrowserEnvironmentCheck","interactionType","setInteractionInProgress","clearCache","hydrateCache"],"sourceRoot":"webpack:///","sources":["./node_modules/@azure/msal-browser/dist/naa/mapping/NestedAppAuthAdapter.mjs","./node_modules/@azure/msal-browser/dist/naa/BridgeError.mjs","./node_modules/@azure/msal-browser/dist/naa/BridgeStatusCode.mjs","./node_modules/@azure/msal-browser/dist/error/NestedAppAuthError.mjs","./node_modules/@azure/msal-browser/dist/controllers/NestedAppAuthController.mjs"],"sourcesContent":["/*! @azure/msal-browser v3.10.0 2024-02-17 */\n'use strict';\nimport { RequestParameterBuilder, StringUtils, AuthenticationScheme, createClientAuthError, ClientAuthErrorCodes, AuthToken, AuthError, InteractionRequiredAuthError, ServerError, ClientAuthError } from '@azure/msal-common';\nimport { isBridgeError } from '../BridgeError.mjs';\nimport { BridgeStatusCode } from '../BridgeStatusCode.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass NestedAppAuthAdapter {\n    constructor(clientId, clientCapabilities, crypto, logger) {\n        this.clientId = clientId;\n        this.clientCapabilities = clientCapabilities;\n        this.crypto = crypto;\n        this.logger = logger;\n    }\n    toNaaTokenRequest(request) {\n        let extraParams;\n        if (request.extraQueryParameters === undefined) {\n            extraParams = new Map();\n        }\n        else {\n            extraParams = new Map(Object.entries(request.extraQueryParameters));\n        }\n        const requestBuilder = new RequestParameterBuilder();\n        const claims = requestBuilder.addClientCapabilitiesToClaims(request.claims, this.clientCapabilities);\n        const tokenRequest = {\n            platformBrokerId: request.account?.homeAccountId,\n            clientId: this.clientId,\n            authority: request.authority,\n            scope: request.scopes.join(\" \"),\n            correlationId: request.correlationId !== undefined\n                ? request.correlationId\n                : this.crypto.createNewGuid(),\n            claims: !StringUtils.isEmptyObj(claims) ? claims : undefined,\n            state: request.state,\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n            extraParameters: extraParams,\n        };\n        return tokenRequest;\n    }\n    fromNaaTokenResponse(request, response, reqTimestamp) {\n        if (!response.token.id_token || !response.token.access_token) {\n            throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n        }\n        const expiresOn = new Date((reqTimestamp + (response.token.expires_in || 0)) * 1000);\n        const idTokenClaims = AuthToken.extractTokenClaims(response.token.id_token, this.crypto.base64Decode);\n        const account = this.fromNaaAccountInfo(response.account, idTokenClaims);\n        const scopes = response.token.scope || request.scope;\n        const authenticationResult = {\n            authority: response.token.authority || account.environment,\n            uniqueId: account.localAccountId,\n            tenantId: account.tenantId,\n            scopes: scopes.split(\" \"),\n            account,\n            idToken: response.token.id_token,\n            idTokenClaims,\n            accessToken: response.token.access_token,\n            fromCache: true,\n            expiresOn: expiresOn,\n            tokenType: request.authenticationScheme || AuthenticationScheme.BEARER,\n            correlationId: request.correlationId,\n            extExpiresOn: expiresOn,\n            state: request.state,\n        };\n        return authenticationResult;\n    }\n    /*\n     *  export type AccountInfo = {\n     *     homeAccountId: string;\n     *     environment: string;\n     *     tenantId: string;\n     *     username: string;\n     *     localAccountId: string;\n     *     name?: string;\n     *     idToken?: string;\n     *     idTokenClaims?: TokenClaims & {\n     *         [key: string]:\n     *             | string\n     *             | number\n     *             | string[]\n     *             | object\n     *             | undefined\n     *             | unknown;\n     *     };\n     *     nativeAccountId?: string;\n     *     authorityType?: string;\n     * };\n     */\n    fromNaaAccountInfo(fromAccount, idTokenClaims) {\n        const effectiveIdTokenClaims = idTokenClaims || fromAccount.idTokenClaims;\n        const localAccountId = fromAccount.localAccountId ||\n            effectiveIdTokenClaims?.oid ||\n            effectiveIdTokenClaims?.sub ||\n            \"\";\n        const tenantId = fromAccount.tenantId || effectiveIdTokenClaims?.tid || \"\";\n        const homeAccountId = fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;\n        const username = fromAccount.username ||\n            effectiveIdTokenClaims?.preferred_username ||\n            \"\";\n        const name = fromAccount.name || effectiveIdTokenClaims?.name;\n        const account = {\n            homeAccountId,\n            environment: fromAccount.environment,\n            tenantId,\n            username,\n            localAccountId,\n            name,\n            idToken: fromAccount.idToken,\n            idTokenClaims: effectiveIdTokenClaims,\n        };\n        return account;\n    }\n    /**\n     *\n     * @param error BridgeError\n     * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError\n     */\n    fromBridgeError(error) {\n        if (isBridgeError(error)) {\n            switch (error.status) {\n                case BridgeStatusCode.UserCancel:\n                    return new ClientAuthError(ClientAuthErrorCodes.userCanceled);\n                case BridgeStatusCode.NoNetwork:\n                    return new ClientAuthError(ClientAuthErrorCodes.noNetworkConnectivity);\n                case BridgeStatusCode.AccountUnavailable:\n                    return new ClientAuthError(ClientAuthErrorCodes.noAccountFound);\n                case BridgeStatusCode.Disabled:\n                    return new ClientAuthError(ClientAuthErrorCodes.nestedAppAuthBridgeDisabled);\n                case BridgeStatusCode.NestedAppAuthUnavailable:\n                    return new ClientAuthError(error.code ||\n                        ClientAuthErrorCodes.nestedAppAuthBridgeDisabled, error.description);\n                case BridgeStatusCode.TransientError:\n                case BridgeStatusCode.PersistentError:\n                    return new ServerError(error.code, error.description);\n                case BridgeStatusCode.UserInteractionRequired:\n                    return new InteractionRequiredAuthError(error.code, error.description);\n                default:\n                    return new AuthError(error.code, error.description);\n            }\n        }\n        else {\n            return new AuthError(\"unknown_error\", \"An unknown error occurred\");\n        }\n    }\n}\n\nexport { NestedAppAuthAdapter };\n","/*! @azure/msal-browser v3.10.0 2024-02-17 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nfunction isBridgeError(error) {\n    return error.status !== undefined;\n}\n\nexport { isBridgeError };\n","/*! @azure/msal-browser v3.10.0 2024-02-17 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst BridgeStatusCode = {\n    UserInteractionRequired: \"USER_INTERACTION_REQUIRED\",\n    UserCancel: \"USER_CANCEL\",\n    NoNetwork: \"NO_NETWORK\",\n    TransientError: \"TRANSIENT_ERROR\",\n    PersistentError: \"PERSISTENT_ERROR\",\n    Disabled: \"DISABLED\",\n    AccountUnavailable: \"ACCOUNT_UNAVAILABLE\",\n    NestedAppAuthUnavailable: \"NESTED_APP_AUTH_UNAVAILABLE\", // NAA is unavailable in the current context, can retry with standard browser based auth\n};\n\nexport { BridgeStatusCode };\n","/*! @azure/msal-browser v3.10.0 2024-02-17 */\n'use strict';\nimport { AuthError } from '@azure/msal-common';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * NestedAppAuthErrorMessage class containing string constants used by error codes and messages.\n */\nconst NestedAppAuthErrorMessage = {\n    unsupportedMethod: {\n        code: \"unsupported_method\",\n        desc: \"The PKCE code challenge and verifier could not be generated.\",\n    },\n};\nclass NestedAppAuthError extends AuthError {\n    constructor(errorCode, errorMessage) {\n        super(errorCode, errorMessage);\n        Object.setPrototypeOf(this, NestedAppAuthError.prototype);\n        this.name = \"NestedAppAuthError\";\n    }\n    static createUnsupportedError() {\n        return new NestedAppAuthError(NestedAppAuthErrorMessage.unsupportedMethod.code, NestedAppAuthErrorMessage.unsupportedMethod.desc);\n    }\n}\n\nexport { NestedAppAuthError, NestedAppAuthErrorMessage };\n","/*! @azure/msal-browser v3.10.0 2024-02-17 */\n'use strict';\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, PerformanceEvents, TimeUtils } from '@azure/msal-common';\nimport { InteractionType } from '../utils/BrowserConstants.mjs';\nimport { CryptoOps } from '../crypto/CryptoOps.mjs';\nimport { NestedAppAuthAdapter } from '../naa/mapping/NestedAppAuthAdapter.mjs';\nimport { NestedAppAuthError } from '../error/NestedAppAuthError.mjs';\nimport { EventHandler } from '../event/EventHandler.mjs';\nimport { EventType } from '../event/EventType.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass NestedAppAuthController {\n    constructor(operatingContext) {\n        this.operatingContext = operatingContext;\n        const proxy = this.operatingContext.getBridgeProxy();\n        if (proxy !== undefined) {\n            this.bridgeProxy = proxy;\n        }\n        else {\n            throw new Error(\"unexpected: bridgeProxy is undefined\");\n        }\n        // Set the configuration.\n        this.config = operatingContext.getConfig();\n        // Initialize logger\n        this.logger = this.operatingContext.getLogger();\n        // Initialize performance client\n        this.performanceClient = this.config.telemetry.client;\n        // Initialize the crypto class.\n        this.browserCrypto = operatingContext.isBrowserEnvironment()\n            ? new CryptoOps(this.logger, this.performanceClient)\n            : DEFAULT_CRYPTO_IMPLEMENTATION;\n        this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\n        this.nestedAppAuthAdapter = new NestedAppAuthAdapter(this.config.auth.clientId, this.config.auth.clientCapabilities, this.browserCrypto, this.logger);\n    }\n    getBrowserStorage() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    getEventHandler() {\n        return this.eventHandler;\n    }\n    static async createController(operatingContext) {\n        const controller = new NestedAppAuthController(operatingContext);\n        return Promise.resolve(controller);\n    }\n    initialize() {\n        // do nothing not required by this controller\n        return Promise.resolve();\n    }\n    async acquireTokenInteractive(request) {\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Popup, request);\n        const atPopupMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenPopup, request.correlationId);\n        atPopupMeasurement?.add({ nestedAppAuthRequest: true });\n        try {\n            const naaRequest = this.nestedAppAuthAdapter.toNaaTokenRequest(request);\n            const reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.bridgeProxy.getTokenInteractive(naaRequest);\n            const result = this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp);\n            this.operatingContext.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Popup, result);\n            atPopupMeasurement.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n            atPopupMeasurement.end({\n                success: true,\n                requestId: result.requestId,\n            });\n            return result;\n        }\n        catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Popup, null, e);\n            atPopupMeasurement.end({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false,\n            });\n            throw error;\n        }\n    }\n    async acquireTokenSilentInternal(request) {\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n        const ssoSilentMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SsoSilent, request.correlationId);\n        ssoSilentMeasurement?.increment({\n            visibilityChangeCount: 0,\n        });\n        ssoSilentMeasurement?.add({\n            nestedAppAuthRequest: true,\n        });\n        try {\n            const naaRequest = this.nestedAppAuthAdapter.toNaaTokenRequest(request);\n            const reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.bridgeProxy.getTokenSilent(naaRequest);\n            const result = this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp);\n            this.operatingContext.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, result);\n            ssoSilentMeasurement?.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n            ssoSilentMeasurement?.end({\n                success: true,\n                requestId: result.requestId,\n            });\n            return result;\n        }\n        catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, e);\n            ssoSilentMeasurement?.end({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false,\n            });\n            throw error;\n        }\n    }\n    async acquireTokenPopup(request) {\n        return this.acquireTokenInteractive(request);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenRedirect(request) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    async acquireTokenSilent(silentRequest) {\n        return this.acquireTokenSilentInternal(silentRequest);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenByCode(request // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    acquireTokenNative(request, apiId, // eslint-disable-line @typescript-eslint/no-unused-vars\n    accountId // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    acquireTokenByRefreshToken(commonRequest, // eslint-disable-line @typescript-eslint/no-unused-vars\n    silentRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback) {\n        return this.eventHandler.addEventCallback(callback);\n    }\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId) {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addPerformanceCallback(callback) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    removePerformanceCallback(callbackId) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    enableAccountStorageEvents() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    disableAccountStorageEvents() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAccount(accountFilter) {\n        throw NestedAppAuthError.createUnsupportedError();\n        // TODO: Look at standard implementation\n    }\n    getAccountByHomeId(homeAccountId) {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.homeAccountId === homeAccountId) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    getAccountByLocalId(localId) {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.localAccountId === localId) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    getAccountByUsername(userName) {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.username === userName) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    getAllAccounts() {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            return [\n                this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount),\n            ];\n        }\n        else {\n            return [];\n        }\n    }\n    handleRedirectPromise(hash // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    loginPopup(request // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        if (request !== undefined) {\n            return this.acquireTokenInteractive(request);\n        }\n        else {\n            throw NestedAppAuthError.createUnsupportedError();\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    loginRedirect(request) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    logout(logoutRequest) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutRedirect(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutPopup(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    ssoSilent(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    request) {\n        return this.acquireTokenSilentInternal(request);\n    }\n    getTokenCache() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    /**\n     * Returns the logger instance\n     */\n    getLogger() {\n        return this.logger;\n    }\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger Logger instance\n     */\n    setLogger(logger) {\n        this.logger = logger;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setActiveAccount(account) {\n        /*\n         * StandardController uses this to allow the developer to set the active account\n         * in the nested app auth scenario the active account is controlled by the app hosting the nested app\n         */\n        this.logger.warning(\"nestedAppAuth does not support setActiveAccount\");\n        return;\n    }\n    getActiveAccount() {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n        }\n        else {\n            return null;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initializeWrapperLibrary(sku, version) {\n        /*\n         * Standard controller uses this to set the sku and version of the wrapper library in the storage\n         * we do nothing here\n         */\n        return;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setNavigationClient(navigationClient) {\n        this.logger.warning(\"setNavigationClient is not supported in nested app auth\");\n    }\n    getConfiguration() {\n        return this.config;\n    }\n    isBrowserEnv() {\n        return this.operatingContext.isBrowserEnvironment();\n    }\n    getBrowserCrypto() {\n        return this.browserCrypto;\n    }\n    getPerformanceClient() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    getRedirectResponse() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    preflightBrowserEnvironmentCheck(interactionType, // eslint-disable-line @typescript-eslint/no-unused-vars\n    setInteractionInProgress // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async clearCache(logoutRequest) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async hydrateCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    result, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    request) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n}\n\nexport { NestedAppAuthController };\n"],"x_google_ignoreList":[0,1,2,3,4]}